function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 20-Dec-2022 18:57:28.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx12 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [2 3 4 5 6 7 8 9 10 11 12];
x1_step2.xoffset = [15.811;-114;3.6596e-06;9.82262e-05;4.8888e-06;0.000394561;0.000147083;0.1113;0.0283;0.0148;0.0003];
x1_step2.gain = [0.370219540187331;0.0333333333333333;0.123421696608517;0.00494134444191343;179108.754835936;176382.397036775;0.268990738903863;2.25047822662316;2.05824843058557;4.05268490374873;3.98089171974522];
x1_step2.ymin = -1;

% Layer 1
b1 = [-1.7196216841542593112;2.1101921438506581197;1.3625119122586093479;-0.29190580418262462858;0.44160888965577216325;0.24359310876097875487;0.71039442060560009651;1.4612694408014559322;1.8776794740197735312;1.7801908510991744095];
IW1_1 = [0.54026403190207872296 0.13202250029087531091 0.67842158361146542855 0.075150978441703791821 0.57356872171061612509 0.57296872560608680391 0.63072525288247405229 0.72601629433792125301 -0.54658622053935468355 -0.92201495761944363139 -0.28298018528531437843;-0.38870376811489604219 -4.7888232217537760604 1.3586657518263998146 2.9582927853202289903 -0.38907434758365383454 -0.088630979350976024644 -3.5380880607708724561 -0.74034564064096541891 -0.62686799924926139838 1.2820010680433246986 -4.365959836198069155;-0.50713003695041913854 -0.86226442434424221961 -1.4991236817527908709 -1.4231276830841732561 -0.38882378977209636206 -0.096319285262691095584 0.56819667070100232653 -0.35610179785500278848 0.26324092473098437139 2.681721661052867578 1.7117411372377211443;0.51202152130334011026 0.39088032241721504256 -1.3430614115213883597 -1.2829081228106071766 -0.46225452192262783679 0.83664588292462682695 0.36973840548232839165 0.45323079346760586361 -0.79898831616141385847 -0.69337372011660458604 0.27800468487282781194;-0.50370251284163669592 -0.067303239076419649201 -0.88981839134412077374 -1.0941881024005613021 0.088296007690842337468 0.07777951272241710734 0.32407341047464699457 -0.14142232376006547145 0.18740100883122395858 0.31298605501495152525 0.55463718062731504066;0.60622469156669867019 2.3330942504736671417 -0.880146338273823714 -0.54012122480753410603 0.26758774701971432819 -0.4137949374526586066 0.68662044849172232386 -0.22175489267242398661 -0.82342854229021389401 0.27174980132254095144 0.51093102143350077604;0.26267752180965270314 -0.52140643138380693422 0.29895139138004372947 -1.1540502391035791785 0.44088496955244171893 0.3766336535885470016 -0.16576307753597699368 1.069658924568205105 -0.10113920324172191723 0.66855331172020315833 0.68025400303504879318;0.048076791749673351839 0.83474636501575349978 0.52969953486701615297 0.19022013829166278809 -0.030513487398690673086 0.15506761741476754457 -2.4565631084339858425 1.3427418084612241511 1.5178118879403459385 0.20519200614232391278 -6.1780529047059049574;0.58021791224834162737 1.2856786614041464389 0.0010561265985946453189 -0.82017657637896512757 0.56150640133625973061 0.091439792212430731633 -0.33139323434221179543 0.19315160548263088369 1.0167067029117677901 0.68331427421493373675 -4.271637650866357383;0.63461386252698792632 -1.0314557781623920896 1.4565385102078529656 1.9691031861665744263 0.82450955111642743045 -0.11021061943778377723 -2.8131813346678629095 0.45991364218740538039 2.3122234237492578224 1.7087366429582582228 -6.9590084221652501739];

% Layer 2
b2 = 1.0139557152258387163;
LW2_1 = [-1.5453946294855147592 -10.797758792625385738 4.7040649807774137514 1.4596351062390460207 0.26615350941475296453 2.5083997356771026155 1.6477293837832500678 -5.4824802212101566568 -3.2873624390716194021 -7.0288124916883125692];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n,~)
a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
